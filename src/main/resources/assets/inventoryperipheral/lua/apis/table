local function print_table(table, newline, indent)
  text = ""
  indent = indent or 0;
  newline = newline or ""
  
  if type(table) ~= 'table' then
  	if (type(table) == 'string') then
      text = text..string.rep('  ', indent).."'"..table.."',"..newline
    else
      text = text..string.rep('  ', indent)..tostring(table)..","..newline
    end
    return text
  end

  local keys = {};

  for k in pairs(table) do
    keys[#keys+1] = k;
  end

  text = text..text..string.rep('  ', indent)..'{'..newline
  indent = indent + 1;
  for k, v in pairs(table) do

    local key = k;
    if (type(key) == 'string') then
      if not (string.match(key, '^[A-Za-z_][0-9A-Za-z_]*$')) then
        key = "['"..key.."']";
      end
    elseif (type(key) == 'number') then
      key = "["..key.."]";
    end

    if (type(v) == 'table') then
      if (next(v)) then
        text = text..string.rep('  ', indent)..tostring(key).." = "..newline
        text = text..print_table(v, newline, indent)..","..newline;
      else
        text = text.. string.rep('  ', indent)..tostring(key).." = {},"..newline
      end 
    elseif (type(v) == 'string') then
      text = text..string.rep('  ', indent)..tostring(key).." = '"..v.."',"..newline
    elseif v == 'nil' then
      text = text..string.rep('  ', indent)..tostring(key).." = nil,"..newline
    else
      text = text..string.rep('  ', indent)..tostring(key).." = "..tostring(v)..","..newline
    end
  end
  indent = indent - 1;
  text = text..string.rep('  ', indent)..'}'..newline
  
  return text
end

function print(table, newline, indent)
	return print_table(table, newline, indent)
end
